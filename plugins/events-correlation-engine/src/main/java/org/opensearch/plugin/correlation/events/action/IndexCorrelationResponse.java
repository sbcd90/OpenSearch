/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

package org.opensearch.plugin.correlation.events.action;

import org.opensearch.action.ActionResponse;
import org.opensearch.common.io.stream.StreamInput;
import org.opensearch.common.io.stream.StreamOutput;
import org.opensearch.core.ParseField;
import org.opensearch.core.xcontent.ToXContentObject;
import org.opensearch.core.xcontent.XContentBuilder;
import org.opensearch.rest.RestStatus;

import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Transport Response for indexing correlations
 *
 * @opensearch.internal
 */
public class IndexCorrelationResponse extends ActionResponse implements ToXContentObject {

    private static final ParseField IS_ORPHAN_FIELD = new ParseField("is_orphan");
    private static final ParseField NEIGHBOR_EVENTS_FIELD = new ParseField("neighbor_events");

    private Boolean isOrphan;

    private Map<String, List<String>> neighborEvents;

    private RestStatus status;

    /**
     * Parameterized ctor for IndexCorrelationResponse
     * @param isOrphan boolean param if event is orphan
     * @param neighborEvents map of neighboring events with each entry storing index to events pair.
     * @param status REST status of the request
     */
    public IndexCorrelationResponse(Boolean isOrphan, Map<String, List<String>> neighborEvents, RestStatus status) {
        super();
        this.isOrphan = isOrphan;
        this.neighborEvents = neighborEvents;
        this.status = status;
    }

    /**
     * StreamInput ctor of IndexCorrelationResponse
     * @param sin StreamInput
     * @throws IOException IOException
     */
    public IndexCorrelationResponse(StreamInput sin) throws IOException {
        this(sin.readBoolean(), sin.readMap(StreamInput::readString, StreamInput::readStringList), sin.readEnum(RestStatus.class));
    }

    @Override
    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {
        builder.startObject()
            .field(IS_ORPHAN_FIELD.getPreferredName(), isOrphan)
            .field(NEIGHBOR_EVENTS_FIELD.getPreferredName(), neighborEvents);
        return builder.endObject();
    }

    @Override
    public void writeTo(StreamOutput out) throws IOException {
        out.writeBoolean(isOrphan);
        out.writeMap(neighborEvents, StreamOutput::writeString, StreamOutput::writeStringCollection);
        out.writeEnum(status);
    }

    /**
     * get REST status of the request
     * @return REST status of the request
     */
    public RestStatus getStatus() {
        return status;
    }

    /**
     * get if event is orphan
     * @return boolean param to check if event is orphan
     */
    public Boolean getOrphan() {
        return isOrphan;
    }

    /**
     * get neighboring events for the input event generated by correlation engine
     * @return neighboring events for the input event
     */
    public Map<String, List<String>> getNeighborEvents() {
        return neighborEvents;
    }
}
